#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the application environment.

  Usage: 
    $0 [options] [commands]

    resetDatabase [<apiPodName/>] [<dbPodName/>]
      - Reset the application database
      Example;
        $0 -e dev resetDatabase

    listDatabases [<dbPodName/>]
      - List the databases hosted on a given postgresql pod instance.
      Example;
        $0 -e dev listdatabases wallet

    getRecordCounts <podName/> [<databaseName/>]
      - Gets a list of tables and the total number of record in each table.
        Examples;
          $0 -e dev getrecordcounts wallet agent_indy_cat_wallet
            - Get the record counts for the 'agent_indy_cat_wallet' database off the 'wallet' pod.

          $0 -e dev getrecordcounts event-db
          - Get the record counts for the '${POSTGRESQL_DATABASE}' (the pod's default database) database off the 'event-db' pod.

    clean
      - Deletes all application resources from a given environment.
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts : FLAG; then
    case ${FLAG} in
      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  switchProject
  exitOnError

  dropAndRecreateDatabaseWithMigrations ${_apiPodName} ${_dbPodName}

  echoWarning "\nThe project's database has been reset."
}

cleanEnv() {
  printAndAskToContinue "If you contiune all of the application resources will be perminently deleted from $(getProjectName)."
  oc -n $(getProjectName) delete all,pvc,secret,networksecuritypolicies -l app=court-of-appeal
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    # Allow all of the other parameters to be overridden ...
    apiPodName=${1:-api}
    dbPodName=${2:-db}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  listdatabases)
    dbPodName=${1:-db}
    listDatabases "${dbPodName}"
    ;;
  getrecordcounts)
    if (( $# <= 1 )); then
      dbPodName=${1}
    else
      dbPodName=${1}
      databaseName=${2}
    fi
    getRecordCounts "${dbPodName}" "${databaseName}"
    ;;
  clean)
    cleanEnv
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null
