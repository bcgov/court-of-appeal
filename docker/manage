#!/bin/bash
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
export MSYS_NO_PATHCONV=1

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image/releases"
  echo -e "Make sure you extract the binary and place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME-coa}"
# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------

usage() {
  cat <<-EOF

  Usage: $0 {start|stop|build}

  Options:

  build - Build the docker images for the project.
          You need to do this first, since the builds require some s2i builds.
          You can build individual components as shown below, components that have dependencies
          will have these dependencies built too.  By default all components are built.

          Examples:
          - Build everything:
            $0 build
          - Build the web UI only:
            $0 build web

          Containers:
            - web
            - api
            - db

  restore - Restore a database backup into the container.
            Place the backup in $(pwd)/tmp.
            Create the folder if it does not exist.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yaml file.
          Example:
            $0 start

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-all() {
 build-web
 build-api
}

echoGreen() {
  _msg="${@}"
  _green='\e[32m'
  _nc='\e[0m' # No Color
  echo -e "${_green}${_msg}${_nc}"
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  echo ${ARGS} ${CONTAINERS}
}

build-web() {
  echo -e "\n\n===================================================================================================="
  echoGreen "Building nginx-runtime using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "nginx-runtime" \
    -f './nginx-runtime/Dockerfile' './nginx-runtime/'
  echo -e "===================================================================================================="

  echo -e "\n\n===================================================================================================="
  echoGreen "Building yarn-builder using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t "yarn-builder" \
    -f './yarn-builder/Dockerfile' './yarn-builder/'
  echo -e "===================================================================================================="

  echo -e "\n\n===================================================================================================="
  echoGreen "Building ${COMPOSE_PROJECT_NAME}-web-artifacts using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    --copy \
    '../web' \
    'yarn-builder' \
    ${COMPOSE_PROJECT_NAME}'-web-artifacts'
  echo -e "===================================================================================================="

  echo -e "\n\n===================================================================================================="
  echoGreen "Building ${COMPOSE_PROJECT_NAME}-web image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t ${COMPOSE_PROJECT_NAME}"-web" \
    -f './react-on-nginx/Dockerfile' './react-on-nginx/'
  echo -e "===================================================================================================="    
}

build-api() {
  echo -e "\n\n===================================================================================================="
  echoGreen "Building ${COMPOSE_PROJECT_NAME}-api image using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    --copy \
    '../api' \
    'centos/nodejs-10-centos7:10' \
    ${COMPOSE_PROJECT_NAME}"-api" 
  echo -e "===================================================================================================="
}

build-db() {
  echo
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern} | cat)

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/.cache
}

configureEnvironment () {
  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export $line
      fi
    done < .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # api
  export SMGOV_USERGUID=${SMGOV_USERGUID:-\'95EB360C2C384711AD1818664D85FE76\'}
  export SMGOV_USERDISPLAYNAME=${SMGOV_USERDISPLAYNAME:-\'User\, Test\'}
  export HUB_URL=${HUB_URL:http://hub-jag-efiling-dev.pathfinder.gov.bc.ca}
  export HUB_TIMEOUT=${HUB_TIMEOUT:10000}
  
  # db
  export POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE:-appdb}
  export POSTGRESQL_USER=${POSTGRESQL_USER:-coa}
  export POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-GHcaifx6FjLBcGLFkHb4}
  export POSTGRESQL_ADMIN_PASSWORD=${POSTGRESQL_ADMIN_PASSWORD:-PtuBN3iFbc4EtmP2LLHo}
  
  # web
  export API_URL=${API_URL:-http://api:8080/api}
  export WEB_BASE_HREF=${WEB_BASE_HREF-/court-of-appeal/}
}

# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$1
shift || true

case "$COMMAND" in
  start|up)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up -d ${_startupParams}
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment $@
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment $@
    deleteVolumes
    ;;
  build)
buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^vcr-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      eval "build-${buildImage}"
    else
      echo -e "Error:\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  *)
    usage
esac

popd >/dev/null